#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var path = require('path');
var stripJsonComments = require('strip-json-comments');

var HTMLHint  = require("../index").HTMLHint;
var pkg = require('../package.json');

require('colors');

function map(val) {
    var objMap = {};
    val.split(',').forEach(function(item){
    var arrItem = item.split(/\s*=\s*/);
    objMap[arrItem[0]] = arrItem[1]?arrItem[1]:true;
    });
    return objMap;
}

program.on('--help', function(){
    console.log('  Examples:');
    console.log('');
    console.log('    htmlhint --list');
    console.log('    htmlhint --rules tag-pair,id-class-value=underline test.html');
    console.log('    htmlhint --config .htmlhintrc test.html');
    console.log('');
});

program
    .version(pkg.version)
    .usage('<file ...> [options]')
    .option('-l, --list', 'show all of the rules available.')
    .option('-c, --config <file>', 'custom configuration file.')
    .option('-r, --rules <ruleid, ruleid=value ...>', 'set all of the rules available.', map)
    .option('-j, --json', 'output messages as raw JSON')
    .parse(process.argv);

if(program.list){
    listRules();
    process.exit(0);
}

var arrAllFiles = getAllFiles(program.args);

var ruleset = program.rules;
if(ruleset === undefined){
    ruleset = getConfig(program.config);
}

var jsonOutput = program.json && [];

processFiles(arrAllFiles, ruleset, jsonOutput);

function listRules(){
    var rules = HTMLHint.rules;
	var rule;
    console.log('     All rules:');
    console.log(' ==================================================');
    for (var id in rules){
        rule = rules[id];
        console.log('     %s : %s', rule.id.green, rule.description);
    }
}

function getConfig(configFile){
    if(configFile === undefined){
        // find default config file in parent directory
        var curDir = process.cwd();
        while(curDir){
            var tmpConfigFile = path.resolve(curDir+path.sep, '.htmlhintrc');
            if(fs.existsSync(tmpConfigFile)){
                configFile = tmpConfigFile;
                break;
            }
            curDir = curDir.substring(0,curDir.lastIndexOf(path.sep));
        }
    }
    if(fs.existsSync(configFile)){
        var config = fs.readFileSync(configFile, 'utf-8'),
            ruleset;
        try{
            ruleset = JSON.parse(stripJsonComments(config));
            console.log('   Config loaded: %s', configFile.cyan);
        }
        catch(e){}
        return ruleset;
    }
}

function getAllFiles(arrTargets){
    var arrAllFiles = [];
    if(arrTargets.length > 0){
        for(var i=0,l=arrTargets.length;i<l;i++){
            var filepath = path.resolve(process.cwd(), arrTargets[i]);
            if(fs.existsSync(filepath) !== false){
              if(fs.statSync(filepath).isFile()) {
                arrAllFiles.push(filepath);
              } else {
                getFiles(arrTargets[i], arrAllFiles);
              }
            } else {
              console.log('File %s does not exist'.red, arrTargets[i]);
            }
        }
    }
    else{
        getFiles(process.cwd(), arrAllFiles);
    }
    return arrAllFiles;
}

function getFiles(filepath, arrFiles){
    if(fs.existsSync(filepath) === false){
        return;
    }
    filepath = path.resolve(process.cwd(), filepath);
    var stat = fs.statSync(filepath);
    if(stat.isFile() && /\.html?$/i.test(filepath)){
        arrFiles.push(filepath);
    }
    else if(stat.isDirectory()){
        fs.readdirSync(filepath).forEach(function(filename){
            getFiles(filepath + '/' + filename, arrFiles);
        });
    }
}

function processFiles(arrFiles, ruleset, jsonOutput){
    var exitcode = 0;
    var allFileCount = 0;
    var allHintCount = 0;
    console.log('');
    arrFiles.forEach(function(filepath){
        var hintCount = hintFile(filepath, ruleset, jsonOutput);
        if(hintCount > 0){
            exitcode = 1;
            allFileCount ++;
            allHintCount += hintCount;
        }
    });
    if(jsonOutput){
        console.log(JSON.stringify(jsonOutput));
    }
    else{
        if(allHintCount > 0){
            console.log('%d errors in %d files'.red, allHintCount, allFileCount);
        }
        else{
            console.log('Done, without errors.'.green);
        }
    }
    process.exit(exitcode);
}

function hintFile(filepath, ruleset, jsonOutput){
    var html = fs.readFileSync(filepath, 'utf-8');
    var messages = HTMLHint.verify(html, ruleset);
    if(messages.length > 0){
        if(jsonOutput){
            logJson(filepath, messages, jsonOutput);
        }
        else{
            logPretty(filepath, messages);
        }
    }
    return messages.length;
}

function logPretty(filepath, messages){
    console.log('   '+path.relative(process.cwd(), filepath));
    messages.forEach(function(hint){
        console.log('      L%d |%s', hint.line, hint.evidence.replace(/\t/g, ' ').gray);
        console.log('      %s^ %s', repeatStr(String(hint.line).length + 3 + hint.col - 1), (hint.message + ' (' + hint.rule.id+')')[hint.type === 'error'?'red':'yellow']);
    });
    console.log('');
}

function repeatStr(n, str){
    return new Array(n + 1).join(str || ' ');
}

function logJson(filepath, messages, jsonOutput){
    jsonOutput.push({'file': filepath, 'messages': messages});
}

function quit(code){
    if ((!process.stdout.flush || !process.stdout.flush()) && (parseFloat(process.versions.node) < 0.5)) {
        process.once("drain", function () {
            process.exit(code || 0);
        });
    } else {
        process.exit(code || 0);
    }
}
